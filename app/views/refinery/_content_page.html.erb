<%
# provide a default array for collecting CSS for sections
css = []

# if 'sections' is passed in as a local_assigns, all of this is ignored.
if local_assigns[:sections].blank?
  # always have a title
  sections = {:body_content_title => {:yield => :body_content_title, :fallback => page_title, :title => true}}

  # append sections from this page.
  @page.parts.each do |part|
    # we have some default yields, body_content_left and body_content_right
    # these map to 'body' and 'side_body' fields in default Refinery.
    section = {:fallback => part.body}
    section[:yield] = case (title_symbol = part.title.to_s.gsub(/\ /, '').underscore.to_sym)
    when :body then :body_content_left
    when :side_body then :body_content_right
    else title_symbol
    end

    # add section to the list unless we were specifically requested not to.
    # otherwise, add css saying it's been removed.
    unless (local_assigns[:hide_sections]||=[]).include?(section[:yield])
      sections[section[:yield]] = section
    else
      css << "no_#{section[:yield]}"
    end

  end unless @page.nil? or @page.parts.blank?

  # Ensure that even without @page.parts we still have body_content_left and body_content_right
  all_yields = sections.keys
  sections[:body_content_left] = {:yield => :body_content_left} unless all_yields.include?(:body_content_left)
  sections[:body_content_right] = {:yield => :body_content_right} unless all_yields.include?(:body_content_right)
end

# you can add more sections to the list using something like this:
# sections[:section_key_normally_same_as_yield] = {:yield => :something_else, :fallback => another_method, :id => 'something'}

sections[:subpage_links] = {:yield => :subpage_links, :fallback => render('/shared/subpage_links',:locals => {:page => @page}), :id => 'subpages_section'}
sections.each_key do |key|
  sections[key][:html] = yield(sections[key][:yield]) if sections[key][:yield].present?

  if sections[key][:html].blank? and !local_assigns[:show_empty_sections] and
      !local_assigns[:remove_automatic_sections] and sections[key].keys.include?(:fallback) and
      sections[key][:fallback].present?
    sections[key][:html] = raw(sections[key][:fallback])
  end

  dom_id = sections[key][:id] || sections[key][:yield]
  if sections[key][:html].present?
    if sections[key][:title]
      sections[key][:html] = content_tag(:h1,sections[key][:html], :id => dom_id)
    else
      sections[key][:html] = content_tag(:section, content_tag(:div, sections[key][:html], :class => 'inner'), :id => dom_id)
    end
  else
    css << "no_#{dom_id}"
  end
end
-%>

<%
content_for :header do
  sections[:body_content_title][:fallback]
end

content_for :under_side_bar do
  raw (sections[:body_content_right][:html] + sections[:subpage_links][:html])
end

-%>

<section id='body_content'<%= " class='#{css.join(' ')}'" if css.present? %>>
  <% if params[:path] == "my-page" %>
    <%= raw sections[:body_content_left][:html].gsub("$new_emails", @new_emails.to_s).gsub("$projects", @projects.to_s) -%>
    <%= content_for :side_bar do %>
      <%= render :partial => "layouts/side_bar" %>
    <% end %>
  <% else %>
    <%= raw sections[:body_content_left][:html] -%>
    <% if params[:path] == "about" %>
      <%= content_for :side_bar do %>
        <%= render :partial => "layouts/static_side_bar", :locals => {:page => "about"} %>
      <% end %>
    <% end %>
  <% end %>
</section>
<%= render :partial => '/refinery/draft_page_message' unless @page.nil? or @page.live? -%>